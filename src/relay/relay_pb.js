// source: relay.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.relay.Header', null, global);
goog.exportSymbol('proto.relay.Message', null, global);
goog.exportSymbol('proto.relay.Message.EncryptionScheme', null, global);
goog.exportSymbol('proto.relay.MessagePage', null, global);
goog.exportSymbol('proto.relay.MessageSet', null, global);
goog.exportSymbol('proto.relay.Payload', null, global);
goog.exportSymbol('proto.relay.PayloadEntry', null, global);
goog.exportSymbol('proto.relay.PayloadPage', null, global);
goog.exportSymbol('proto.relay.Profile', null, global);
goog.exportSymbol('proto.relay.ProfileEntry', null, global);
goog.exportSymbol('proto.relay.PushError', null, global);
goog.exportSymbol('proto.relay.PushErrors', null, global);
goog.exportSymbol('proto.relay.Stamp', null, global);
goog.exportSymbol('proto.relay.Stamp.StampType', null, global);
goog.exportSymbol('proto.relay.StampOutpoints', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.Header.displayName = 'proto.relay.Header';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.ProfileEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.ProfileEntry.repeatedFields_, null);
};
goog.inherits(proto.relay.ProfileEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.ProfileEntry.displayName = 'proto.relay.ProfileEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.Profile.repeatedFields_, null);
};
goog.inherits(proto.relay.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.Profile.displayName = 'proto.relay.Profile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.PayloadEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.PayloadEntry.repeatedFields_, null);
};
goog.inherits(proto.relay.PayloadEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.PayloadEntry.displayName = 'proto.relay.PayloadEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.Payload.repeatedFields_, null);
};
goog.inherits(proto.relay.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.Payload.displayName = 'proto.relay.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.StampOutpoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.StampOutpoints.repeatedFields_, null);
};
goog.inherits(proto.relay.StampOutpoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.StampOutpoints.displayName = 'proto.relay.StampOutpoints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.Stamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.Stamp.repeatedFields_, null);
};
goog.inherits(proto.relay.Stamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.Stamp.displayName = 'proto.relay.Stamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.Message.displayName = 'proto.relay.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.MessageSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.MessageSet.repeatedFields_, null);
};
goog.inherits(proto.relay.MessageSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.MessageSet.displayName = 'proto.relay.MessageSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.PushError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.PushError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.PushError.displayName = 'proto.relay.PushError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.PushErrors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.relay.PushErrors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.PushErrors.displayName = 'proto.relay.PushErrors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.MessagePage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.MessagePage.repeatedFields_, null);
};
goog.inherits(proto.relay.MessagePage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.MessagePage.displayName = 'proto.relay.MessagePage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.relay.PayloadPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.relay.PayloadPage.repeatedFields_, null);
};
goog.inherits(proto.relay.PayloadPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.relay.PayloadPage.displayName = 'proto.relay.PayloadPage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.Header} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.Header}
 */
proto.relay.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.Header;
  return proto.relay.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.Header}
 */
proto.relay.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.Header.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.Header} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Header.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.relay.Header.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.Header} returns this
 */
proto.relay.Header.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.relay.Header.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.Header} returns this
 */
proto.relay.Header.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.ProfileEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.ProfileEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.ProfileEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.ProfileEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.ProfileEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.relay.Header.toObject, includeInstance),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.ProfileEntry}
 */
proto.relay.ProfileEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.ProfileEntry;
  return proto.relay.ProfileEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.ProfileEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.ProfileEntry}
 */
proto.relay.ProfileEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = new proto.relay.Header;
      reader.readMessage(value,proto.relay.Header.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.ProfileEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.ProfileEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.ProfileEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.ProfileEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.relay.Header.serializeBinaryToWriter
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.relay.ProfileEntry.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.ProfileEntry} returns this
 */
proto.relay.ProfileEntry.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Header headers = 2;
 * @return {!Array<!proto.relay.Header>}
 */
proto.relay.ProfileEntry.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.relay.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.Header, 2));
};


/**
 * @param {!Array<!proto.relay.Header>} value
 * @return {!proto.relay.ProfileEntry} returns this
*/
proto.relay.ProfileEntry.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.relay.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.Header}
 */
proto.relay.ProfileEntry.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.relay.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.ProfileEntry} returns this
 */
proto.relay.ProfileEntry.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.relay.ProfileEntry.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.relay.ProfileEntry.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.relay.ProfileEntry.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.ProfileEntry} returns this
 */
proto.relay.ProfileEntry.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.Profile.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ttl: jspb.Message.getFieldWithDefault(msg, 2, 0),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.relay.ProfileEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.Profile}
 */
proto.relay.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.Profile;
  return proto.relay.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.Profile}
 */
proto.relay.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtl(value);
      break;
    case 3:
      var value = new proto.relay.ProfileEntry;
      reader.readMessage(value,proto.relay.ProfileEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTtl();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.relay.ProfileEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.relay.Profile.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.Profile} returns this
 */
proto.relay.Profile.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ttl = 2;
 * @return {number}
 */
proto.relay.Profile.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.Profile} returns this
 */
proto.relay.Profile.prototype.setTtl = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ProfileEntry entries = 3;
 * @return {!Array<!proto.relay.ProfileEntry>}
 */
proto.relay.Profile.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.relay.ProfileEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.ProfileEntry, 3));
};


/**
 * @param {!Array<!proto.relay.ProfileEntry>} value
 * @return {!proto.relay.Profile} returns this
*/
proto.relay.Profile.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.relay.ProfileEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.ProfileEntry}
 */
proto.relay.Profile.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.relay.ProfileEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.Profile} returns this
 */
proto.relay.Profile.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.PayloadEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.PayloadEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.PayloadEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.PayloadEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PayloadEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    headersList: jspb.Message.toObjectList(msg.getHeadersList(),
    proto.relay.Header.toObject, includeInstance),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.PayloadEntry}
 */
proto.relay.PayloadEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.PayloadEntry;
  return proto.relay.PayloadEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.PayloadEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.PayloadEntry}
 */
proto.relay.PayloadEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = new proto.relay.Header;
      reader.readMessage(value,proto.relay.Header.deserializeBinaryFromReader);
      msg.addHeaders(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.PayloadEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.PayloadEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.PayloadEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PayloadEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeadersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.relay.Header.serializeBinaryToWriter
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.relay.PayloadEntry.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.PayloadEntry} returns this
 */
proto.relay.PayloadEntry.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Header headers = 2;
 * @return {!Array<!proto.relay.Header>}
 */
proto.relay.PayloadEntry.prototype.getHeadersList = function() {
  return /** @type{!Array<!proto.relay.Header>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.Header, 2));
};


/**
 * @param {!Array<!proto.relay.Header>} value
 * @return {!proto.relay.PayloadEntry} returns this
*/
proto.relay.PayloadEntry.prototype.setHeadersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.relay.Header=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.Header}
 */
proto.relay.PayloadEntry.prototype.addHeaders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.relay.Header, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.PayloadEntry} returns this
 */
proto.relay.PayloadEntry.prototype.clearHeadersList = function() {
  return this.setHeadersList([]);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.relay.PayloadEntry.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.relay.PayloadEntry.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.relay.PayloadEntry.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.PayloadEntry} returns this
 */
proto.relay.PayloadEntry.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.Payload.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.relay.PayloadEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.Payload}
 */
proto.relay.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.Payload;
  return proto.relay.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.Payload}
 */
proto.relay.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = new proto.relay.PayloadEntry;
      reader.readMessage(value,proto.relay.PayloadEntry.deserializeBinaryFromReader);
      msg.addEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.relay.PayloadEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.relay.Payload.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.Payload} returns this
 */
proto.relay.Payload.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PayloadEntry entries = 2;
 * @return {!Array<!proto.relay.PayloadEntry>}
 */
proto.relay.Payload.prototype.getEntriesList = function() {
  return /** @type{!Array<!proto.relay.PayloadEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.PayloadEntry, 2));
};


/**
 * @param {!Array<!proto.relay.PayloadEntry>} value
 * @return {!proto.relay.Payload} returns this
*/
proto.relay.Payload.prototype.setEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.relay.PayloadEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.PayloadEntry}
 */
proto.relay.Payload.prototype.addEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.relay.PayloadEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.Payload} returns this
 */
proto.relay.Payload.prototype.clearEntriesList = function() {
  return this.setEntriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.StampOutpoints.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.StampOutpoints.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.StampOutpoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.StampOutpoints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.StampOutpoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    stampTx: msg.getStampTx_asB64(),
    voutsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.StampOutpoints}
 */
proto.relay.StampOutpoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.StampOutpoints;
  return proto.relay.StampOutpoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.StampOutpoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.StampOutpoints}
 */
proto.relay.StampOutpoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStampTx(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setVoutsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.StampOutpoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.StampOutpoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.StampOutpoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.StampOutpoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStampTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getVoutsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
};


/**
 * optional bytes stamp_tx = 1;
 * @return {!(string|Uint8Array)}
 */
proto.relay.StampOutpoints.prototype.getStampTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes stamp_tx = 1;
 * This is a type-conversion wrapper around `getStampTx()`
 * @return {string}
 */
proto.relay.StampOutpoints.prototype.getStampTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStampTx()));
};


/**
 * optional bytes stamp_tx = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStampTx()`
 * @return {!Uint8Array}
 */
proto.relay.StampOutpoints.prototype.getStampTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStampTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.StampOutpoints} returns this
 */
proto.relay.StampOutpoints.prototype.setStampTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated uint32 vouts = 2;
 * @return {!Array<number>}
 */
proto.relay.StampOutpoints.prototype.getVoutsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.relay.StampOutpoints} returns this
 */
proto.relay.StampOutpoints.prototype.setVoutsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.relay.StampOutpoints} returns this
 */
proto.relay.StampOutpoints.prototype.addVouts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.StampOutpoints} returns this
 */
proto.relay.StampOutpoints.prototype.clearVoutsList = function() {
  return this.setVoutsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.Stamp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.Stamp.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.Stamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.Stamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Stamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    stampType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stampOutpointsList: jspb.Message.toObjectList(msg.getStampOutpointsList(),
    proto.relay.StampOutpoints.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.Stamp}
 */
proto.relay.Stamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.Stamp;
  return proto.relay.Stamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.Stamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.Stamp}
 */
proto.relay.Stamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.relay.Stamp.StampType} */ (reader.readEnum());
      msg.setStampType(value);
      break;
    case 2:
      var value = new proto.relay.StampOutpoints;
      reader.readMessage(value,proto.relay.StampOutpoints.deserializeBinaryFromReader);
      msg.addStampOutpoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.Stamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.Stamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.Stamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Stamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStampType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStampOutpointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.relay.StampOutpoints.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.relay.Stamp.StampType = {
  NONE: 0,
  MESSAGECOMMITMENT: 1
};

/**
 * optional StampType stamp_type = 1;
 * @return {!proto.relay.Stamp.StampType}
 */
proto.relay.Stamp.prototype.getStampType = function() {
  return /** @type {!proto.relay.Stamp.StampType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.relay.Stamp.StampType} value
 * @return {!proto.relay.Stamp} returns this
 */
proto.relay.Stamp.prototype.setStampType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated StampOutpoints stamp_outpoints = 2;
 * @return {!Array<!proto.relay.StampOutpoints>}
 */
proto.relay.Stamp.prototype.getStampOutpointsList = function() {
  return /** @type{!Array<!proto.relay.StampOutpoints>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.StampOutpoints, 2));
};


/**
 * @param {!Array<!proto.relay.StampOutpoints>} value
 * @return {!proto.relay.Stamp} returns this
*/
proto.relay.Stamp.prototype.setStampOutpointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.relay.StampOutpoints=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.StampOutpoints}
 */
proto.relay.Stamp.prototype.addStampOutpoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.relay.StampOutpoints, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.Stamp} returns this
 */
proto.relay.Stamp.prototype.clearStampOutpointsList = function() {
  return this.setStampOutpointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePublicKey: msg.getSourcePublicKey_asB64(),
    destinationPublicKey: msg.getDestinationPublicKey_asB64(),
    receivedTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    payloadDigest: msg.getPayloadDigest_asB64(),
    stamp: (f = msg.getStamp()) && proto.relay.Stamp.toObject(includeInstance, f),
    scheme: jspb.Message.getFieldWithDefault(msg, 6, 0),
    salt: msg.getSalt_asB64(),
    payloadHmac: msg.getPayloadHmac_asB64(),
    payloadSize: jspb.Message.getFieldWithDefault(msg, 9, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.Message}
 */
proto.relay.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.Message;
  return proto.relay.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.Message}
 */
proto.relay.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSourcePublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestinationPublicKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReceivedTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayloadDigest(value);
      break;
    case 5:
      var value = new proto.relay.Stamp;
      reader.readMessage(value,proto.relay.Stamp.deserializeBinaryFromReader);
      msg.setStamp(value);
      break;
    case 6:
      var value = /** @type {!proto.relay.Message.EncryptionScheme} */ (reader.readEnum());
      msg.setScheme(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSalt(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayloadHmac(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayloadSize(value);
      break;
    case 100:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcePublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDestinationPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReceivedTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPayloadDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getStamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.relay.Stamp.serializeBinaryToWriter
    );
  }
  f = message.getScheme();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getSalt_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getPayloadHmac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getPayloadSize();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      100,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.relay.Message.EncryptionScheme = {
  NONE: 0,
  EPHEMERALDH: 1
};

/**
 * optional bytes source_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getSourcePublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes source_public_key = 1;
 * This is a type-conversion wrapper around `getSourcePublicKey()`
 * @return {string}
 */
proto.relay.Message.prototype.getSourcePublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSourcePublicKey()));
};


/**
 * optional bytes source_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSourcePublicKey()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getSourcePublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSourcePublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setSourcePublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes destination_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getDestinationPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes destination_public_key = 2;
 * This is a type-conversion wrapper around `getDestinationPublicKey()`
 * @return {string}
 */
proto.relay.Message.prototype.getDestinationPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestinationPublicKey()));
};


/**
 * optional bytes destination_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestinationPublicKey()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getDestinationPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestinationPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setDestinationPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional int64 received_time = 3;
 * @return {number}
 */
proto.relay.Message.prototype.getReceivedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setReceivedTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes payload_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getPayloadDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes payload_digest = 4;
 * This is a type-conversion wrapper around `getPayloadDigest()`
 * @return {string}
 */
proto.relay.Message.prototype.getPayloadDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayloadDigest()));
};


/**
 * optional bytes payload_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadDigest()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getPayloadDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayloadDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setPayloadDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Stamp stamp = 5;
 * @return {?proto.relay.Stamp}
 */
proto.relay.Message.prototype.getStamp = function() {
  return /** @type{?proto.relay.Stamp} */ (
    jspb.Message.getWrapperField(this, proto.relay.Stamp, 5));
};


/**
 * @param {?proto.relay.Stamp|undefined} value
 * @return {!proto.relay.Message} returns this
*/
proto.relay.Message.prototype.setStamp = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.clearStamp = function() {
  return this.setStamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.relay.Message.prototype.hasStamp = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EncryptionScheme scheme = 6;
 * @return {!proto.relay.Message.EncryptionScheme}
 */
proto.relay.Message.prototype.getScheme = function() {
  return /** @type {!proto.relay.Message.EncryptionScheme} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.relay.Message.EncryptionScheme} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setScheme = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bytes salt = 7;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getSalt = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes salt = 7;
 * This is a type-conversion wrapper around `getSalt()`
 * @return {string}
 */
proto.relay.Message.prototype.getSalt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSalt()));
};


/**
 * optional bytes salt = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSalt()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getSalt_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSalt()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setSalt = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes payload_hmac = 8;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getPayloadHmac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes payload_hmac = 8;
 * This is a type-conversion wrapper around `getPayloadHmac()`
 * @return {string}
 */
proto.relay.Message.prototype.getPayloadHmac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayloadHmac()));
};


/**
 * optional bytes payload_hmac = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadHmac()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getPayloadHmac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayloadHmac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setPayloadHmac = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional uint64 payload_size = 9;
 * @return {number}
 */
proto.relay.Message.prototype.getPayloadSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setPayloadSize = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes payload = 100;
 * @return {!(string|Uint8Array)}
 */
proto.relay.Message.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 100, ""));
};


/**
 * optional bytes payload = 100;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.relay.Message.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 100;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.relay.Message.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.Message} returns this
 */
proto.relay.Message.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 100, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.MessageSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.MessageSet.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.MessageSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.MessageSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.MessageSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.relay.Message.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.MessageSet}
 */
proto.relay.MessageSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.MessageSet;
  return proto.relay.MessageSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.MessageSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.MessageSet}
 */
proto.relay.MessageSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.relay.Message;
      reader.readMessage(value,proto.relay.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.MessageSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.MessageSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.MessageSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.MessageSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.relay.Message.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.relay.Message>}
 */
proto.relay.MessageSet.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.relay.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.Message, 1));
};


/**
 * @param {!Array<!proto.relay.Message>} value
 * @return {!proto.relay.MessageSet} returns this
*/
proto.relay.MessageSet.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.relay.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.Message}
 */
proto.relay.MessageSet.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.relay.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.MessageSet} returns this
 */
proto.relay.MessageSet.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.PushError.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.PushError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.PushError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PushError.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    errorText: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.PushError}
 */
proto.relay.PushError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.PushError;
  return proto.relay.PushError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.PushError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.PushError}
 */
proto.relay.PushError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatusCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.PushError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.PushError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.PushError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PushError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusCode();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getErrorText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 status_code = 1;
 * @return {number}
 */
proto.relay.PushError.prototype.getStatusCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.PushError} returns this
 */
proto.relay.PushError.prototype.setStatusCode = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string error_text = 2;
 * @return {string}
 */
proto.relay.PushError.prototype.getErrorText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.relay.PushError} returns this
 */
proto.relay.PushError.prototype.setErrorText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.PushErrors.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.PushErrors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.PushErrors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PushErrors.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorsMap: (f = msg.getErrorsMap()) ? f.toObject(includeInstance, proto.relay.PushError.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.PushErrors}
 */
proto.relay.PushErrors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.PushErrors;
  return proto.relay.PushErrors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.PushErrors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.PushErrors}
 */
proto.relay.PushErrors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getErrorsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.relay.PushError.deserializeBinaryFromReader, 0, new proto.relay.PushError());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.PushErrors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.PushErrors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.PushErrors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PushErrors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.relay.PushError.serializeBinaryToWriter);
  }
};


/**
 * map<int32, PushError> errors = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.relay.PushError>}
 */
proto.relay.PushErrors.prototype.getErrorsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.relay.PushError>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.relay.PushError));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.relay.PushErrors} returns this
 */
proto.relay.PushErrors.prototype.clearErrorsMap = function() {
  this.getErrorsMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.MessagePage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.MessagePage.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.MessagePage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.MessagePage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.MessagePage.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.relay.Message.toObject, includeInstance),
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startDigest: msg.getStartDigest_asB64(),
    endDigest: msg.getEndDigest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.MessagePage}
 */
proto.relay.MessagePage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.MessagePage;
  return proto.relay.MessagePage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.MessagePage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.MessagePage}
 */
proto.relay.MessagePage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.relay.Message;
      reader.readMessage(value,proto.relay.Message.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStartDigest(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEndDigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.MessagePage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.MessagePage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.MessagePage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.MessagePage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.relay.Message.serializeBinaryToWriter
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStartDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEndDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated Message messages = 1;
 * @return {!Array<!proto.relay.Message>}
 */
proto.relay.MessagePage.prototype.getMessagesList = function() {
  return /** @type{!Array<!proto.relay.Message>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.relay.Message, 1));
};


/**
 * @param {!Array<!proto.relay.Message>} value
 * @return {!proto.relay.MessagePage} returns this
*/
proto.relay.MessagePage.prototype.setMessagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.relay.Message=} opt_value
 * @param {number=} opt_index
 * @return {!proto.relay.Message}
 */
proto.relay.MessagePage.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.relay.Message, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.MessagePage} returns this
 */
proto.relay.MessagePage.prototype.clearMessagesList = function() {
  return this.setMessagesList([]);
};


/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.relay.MessagePage.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.MessagePage} returns this
 */
proto.relay.MessagePage.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_time = 3;
 * @return {number}
 */
proto.relay.MessagePage.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.MessagePage} returns this
 */
proto.relay.MessagePage.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes start_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.relay.MessagePage.prototype.getStartDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes start_digest = 4;
 * This is a type-conversion wrapper around `getStartDigest()`
 * @return {string}
 */
proto.relay.MessagePage.prototype.getStartDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStartDigest()));
};


/**
 * optional bytes start_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStartDigest()`
 * @return {!Uint8Array}
 */
proto.relay.MessagePage.prototype.getStartDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStartDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.MessagePage} returns this
 */
proto.relay.MessagePage.prototype.setStartDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes end_digest = 5;
 * @return {!(string|Uint8Array)}
 */
proto.relay.MessagePage.prototype.getEndDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes end_digest = 5;
 * This is a type-conversion wrapper around `getEndDigest()`
 * @return {string}
 */
proto.relay.MessagePage.prototype.getEndDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEndDigest()));
};


/**
 * optional bytes end_digest = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEndDigest()`
 * @return {!Uint8Array}
 */
proto.relay.MessagePage.prototype.getEndDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEndDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.MessagePage} returns this
 */
proto.relay.MessagePage.prototype.setEndDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.relay.PayloadPage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.relay.PayloadPage.prototype.toObject = function(opt_includeInstance) {
  return proto.relay.PayloadPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.relay.PayloadPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PayloadPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadsList: msg.getPayloadsList_asB64(),
    startTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startDigest: msg.getStartDigest_asB64(),
    endDigest: msg.getEndDigest_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.relay.PayloadPage}
 */
proto.relay.PayloadPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.relay.PayloadPage;
  return proto.relay.PayloadPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.relay.PayloadPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.relay.PayloadPage}
 */
proto.relay.PayloadPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayloads(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStartDigest(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEndDigest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.relay.PayloadPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.relay.PayloadPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.relay.PayloadPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.relay.PayloadPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloadsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getStartDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEndDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * repeated bytes payloads = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.relay.PayloadPage.prototype.getPayloadsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes payloads = 1;
 * This is a type-conversion wrapper around `getPayloadsList()`
 * @return {!Array<string>}
 */
proto.relay.PayloadPage.prototype.getPayloadsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayloadsList()));
};


/**
 * repeated bytes payloads = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.relay.PayloadPage.prototype.getPayloadsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayloadsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.setPayloadsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.addPayloads = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.clearPayloadsList = function() {
  return this.setPayloadsList([]);
};


/**
 * optional int64 start_time = 2;
 * @return {number}
 */
proto.relay.PayloadPage.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 end_time = 3;
 * @return {number}
 */
proto.relay.PayloadPage.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes start_digest = 4;
 * @return {!(string|Uint8Array)}
 */
proto.relay.PayloadPage.prototype.getStartDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes start_digest = 4;
 * This is a type-conversion wrapper around `getStartDigest()`
 * @return {string}
 */
proto.relay.PayloadPage.prototype.getStartDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStartDigest()));
};


/**
 * optional bytes start_digest = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStartDigest()`
 * @return {!Uint8Array}
 */
proto.relay.PayloadPage.prototype.getStartDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStartDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.setStartDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes end_digest = 5;
 * @return {!(string|Uint8Array)}
 */
proto.relay.PayloadPage.prototype.getEndDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes end_digest = 5;
 * This is a type-conversion wrapper around `getEndDigest()`
 * @return {string}
 */
proto.relay.PayloadPage.prototype.getEndDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEndDigest()));
};


/**
 * optional bytes end_digest = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEndDigest()`
 * @return {!Uint8Array}
 */
proto.relay.PayloadPage.prototype.getEndDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEndDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.relay.PayloadPage} returns this
 */
proto.relay.PayloadPage.prototype.setEndDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


goog.object.extend(exports, proto.relay);
