// source: paymentrequest.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.bip70.Output', null, global);
goog.exportSymbol('proto.bip70.Payment', null, global);
goog.exportSymbol('proto.bip70.PaymentACK', null, global);
goog.exportSymbol('proto.bip70.PaymentDetails', null, global);
goog.exportSymbol('proto.bip70.PaymentRequest', null, global);
goog.exportSymbol('proto.bip70.X509Certificates', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bip70.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.Output.displayName = 'proto.bip70.Output';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.PaymentDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bip70.PaymentDetails.repeatedFields_, null);
};
goog.inherits(proto.bip70.PaymentDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.PaymentDetails.displayName = 'proto.bip70.PaymentDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.PaymentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bip70.PaymentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.PaymentRequest.displayName = 'proto.bip70.PaymentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.X509Certificates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bip70.X509Certificates.repeatedFields_, null);
};
goog.inherits(proto.bip70.X509Certificates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.X509Certificates.displayName = 'proto.bip70.X509Certificates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.bip70.Payment.repeatedFields_, null);
};
goog.inherits(proto.bip70.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.Payment.displayName = 'proto.bip70.Payment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.bip70.PaymentACK = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.bip70.PaymentACK, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.bip70.PaymentACK.displayName = 'proto.bip70.PaymentACK';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.Output.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.Output} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    script: msg.getScript_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.Output}
 */
proto.bip70.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.Output;
  return proto.bip70.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.Output}
 */
proto.bip70.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.Output.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.Output} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.Output.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 amount = 1;
 * @return {number}
 */
proto.bip70.Output.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.bip70.Output} returns this
 */
proto.bip70.Output.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.Output} returns this
 */
proto.bip70.Output.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.Output.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes script = 2;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.Output.prototype.getScript = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes script = 2;
 * This is a type-conversion wrapper around `getScript()`
 * @return {string}
 */
proto.bip70.Output.prototype.getScript_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScript()));
};


/**
 * required bytes script = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScript()`
 * @return {!Uint8Array}
 */
proto.bip70.Output.prototype.getScript_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScript()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.Output} returns this
 */
proto.bip70.Output.prototype.setScript = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.Output} returns this
 */
proto.bip70.Output.prototype.clearScript = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.Output.prototype.hasScript = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bip70.PaymentDetails.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.PaymentDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.PaymentDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.PaymentDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    network: jspb.Message.getFieldWithDefault(msg, 1, "main"),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.bip70.Output.toObject, includeInstance),
    time: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    expires: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    paymentUrl: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    merchantData: msg.getMerchantData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.PaymentDetails}
 */
proto.bip70.PaymentDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.PaymentDetails;
  return proto.bip70.PaymentDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.PaymentDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.PaymentDetails}
 */
proto.bip70.PaymentDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 2:
      var value = new proto.bip70.Output;
      reader.readMessage(value,proto.bip70.Output.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExpires(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentUrl(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerchantData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.PaymentDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.PaymentDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.PaymentDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.bip70.Output.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional string network = 1;
 * @return {string}
 */
proto.bip70.PaymentDetails.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "main"));
};


/**
 * @param {string} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setNetwork = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearNetwork = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Output outputs = 2;
 * @return {!Array<!proto.bip70.Output>}
 */
proto.bip70.PaymentDetails.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.bip70.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bip70.Output, 2));
};


/**
 * @param {!Array<!proto.bip70.Output>} value
 * @return {!proto.bip70.PaymentDetails} returns this
*/
proto.bip70.PaymentDetails.prototype.setOutputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.bip70.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bip70.Output}
 */
proto.bip70.PaymentDetails.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.bip70.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearOutputsList = function() {
  return this.setOutputsList([]);
};


/**
 * required uint64 time = 3;
 * @return {number}
 */
proto.bip70.PaymentDetails.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearTime = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 expires = 4;
 * @return {number}
 */
proto.bip70.PaymentDetails.prototype.getExpires = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setExpires = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearExpires = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasExpires = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.bip70.PaymentDetails.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string payment_url = 6;
 * @return {string}
 */
proto.bip70.PaymentDetails.prototype.getPaymentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setPaymentUrl = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearPaymentUrl = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasPaymentUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes merchant_data = 7;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.PaymentDetails.prototype.getMerchantData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes merchant_data = 7;
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {string}
 */
proto.bip70.PaymentDetails.prototype.getMerchantData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerchantData()));
};


/**
 * optional bytes merchant_data = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {!Uint8Array}
 */
proto.bip70.PaymentDetails.prototype.getMerchantData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerchantData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.setMerchantData = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentDetails} returns this
 */
proto.bip70.PaymentDetails.prototype.clearMerchantData = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentDetails.prototype.hasMerchantData = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.PaymentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.PaymentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.PaymentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    paymentDetailsVersion: jspb.Message.getFieldWithDefault(msg, 1, 1),
    pkiType: jspb.Message.getFieldWithDefault(msg, 2, "none"),
    pkiData: msg.getPkiData_asB64(),
    serializedPaymentDetails: msg.getSerializedPaymentDetails_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.PaymentRequest}
 */
proto.bip70.PaymentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.PaymentRequest;
  return proto.bip70.PaymentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.PaymentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.PaymentRequest}
 */
proto.bip70.PaymentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPaymentDetailsVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkiType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiData(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerializedPaymentDetails(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.PaymentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.PaymentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.PaymentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional uint32 payment_details_version = 1;
 * @return {number}
 */
proto.bip70.PaymentRequest.prototype.getPaymentDetailsVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {number} value
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.setPaymentDetailsVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.clearPaymentDetailsVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentRequest.prototype.hasPaymentDetailsVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pki_type = 2;
 * @return {string}
 */
proto.bip70.PaymentRequest.prototype.getPkiType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "none"));
};


/**
 * @param {string} value
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.setPkiType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.clearPkiType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentRequest.prototype.hasPkiType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes pki_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.PaymentRequest.prototype.getPkiData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pki_data = 3;
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {string}
 */
proto.bip70.PaymentRequest.prototype.getPkiData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiData()));
};


/**
 * optional bytes pki_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiData()`
 * @return {!Uint8Array}
 */
proto.bip70.PaymentRequest.prototype.getPkiData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.setPkiData = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.clearPkiData = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentRequest.prototype.hasPkiData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bytes serialized_payment_details = 4;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.PaymentRequest.prototype.getSerializedPaymentDetails = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * required bytes serialized_payment_details = 4;
 * This is a type-conversion wrapper around `getSerializedPaymentDetails()`
 * @return {string}
 */
proto.bip70.PaymentRequest.prototype.getSerializedPaymentDetails_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerializedPaymentDetails()));
};


/**
 * required bytes serialized_payment_details = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerializedPaymentDetails()`
 * @return {!Uint8Array}
 */
proto.bip70.PaymentRequest.prototype.getSerializedPaymentDetails_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerializedPaymentDetails()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.setSerializedPaymentDetails = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.clearSerializedPaymentDetails = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentRequest.prototype.hasSerializedPaymentDetails = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.PaymentRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.bip70.PaymentRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.bip70.PaymentRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentRequest} returns this
 */
proto.bip70.PaymentRequest.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentRequest.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bip70.X509Certificates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.X509Certificates.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.X509Certificates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.X509Certificates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.X509Certificates.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateList: msg.getCertificateList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.X509Certificates}
 */
proto.bip70.X509Certificates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.X509Certificates;
  return proto.bip70.X509Certificates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.X509Certificates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.X509Certificates}
 */
proto.bip70.X509Certificates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.X509Certificates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.X509Certificates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.X509Certificates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.X509Certificates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes certificate = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bip70.X509Certificates.prototype.getCertificateList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes certificate = 1;
 * This is a type-conversion wrapper around `getCertificateList()`
 * @return {!Array<string>}
 */
proto.bip70.X509Certificates.prototype.getCertificateList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getCertificateList()));
};


/**
 * repeated bytes certificate = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificateList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bip70.X509Certificates.prototype.getCertificateList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getCertificateList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bip70.X509Certificates} returns this
 */
proto.bip70.X509Certificates.prototype.setCertificateList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bip70.X509Certificates} returns this
 */
proto.bip70.X509Certificates.prototype.addCertificate = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bip70.X509Certificates} returns this
 */
proto.bip70.X509Certificates.prototype.clearCertificateList = function() {
  return this.setCertificateList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.bip70.Payment.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    merchantData: msg.getMerchantData_asB64(),
    transactionsList: msg.getTransactionsList_asB64(),
    refundToList: jspb.Message.toObjectList(msg.getRefundToList(),
    proto.bip70.Output.toObject, includeInstance),
    memo: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.Payment}
 */
proto.bip70.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.Payment;
  return proto.bip70.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.Payment}
 */
proto.bip70.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMerchantData(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTransactions(value);
      break;
    case 3:
      var value = new proto.bip70.Output;
      reader.readMessage(value,proto.bip70.Output.deserializeBinaryFromReader);
      msg.addRefundTo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getRefundToList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.bip70.Output.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes merchant_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.bip70.Payment.prototype.getMerchantData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes merchant_data = 1;
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {string}
 */
proto.bip70.Payment.prototype.getMerchantData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMerchantData()));
};


/**
 * optional bytes merchant_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerchantData()`
 * @return {!Uint8Array}
 */
proto.bip70.Payment.prototype.getMerchantData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMerchantData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.setMerchantData = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.clearMerchantData = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.Payment.prototype.hasMerchantData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes transactions = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.bip70.Payment.prototype.getTransactionsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes transactions = 2;
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<string>}
 */
proto.bip70.Payment.prototype.getTransactionsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTransactionsList()));
};


/**
 * repeated bytes transactions = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.bip70.Payment.prototype.getTransactionsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTransactionsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.setTransactionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.addTransactions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * repeated Output refund_to = 3;
 * @return {!Array<!proto.bip70.Output>}
 */
proto.bip70.Payment.prototype.getRefundToList = function() {
  return /** @type{!Array<!proto.bip70.Output>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.bip70.Output, 3));
};


/**
 * @param {!Array<!proto.bip70.Output>} value
 * @return {!proto.bip70.Payment} returns this
*/
proto.bip70.Payment.prototype.setRefundToList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.bip70.Output=} opt_value
 * @param {number=} opt_index
 * @return {!proto.bip70.Output}
 */
proto.bip70.Payment.prototype.addRefundTo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.bip70.Output, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.clearRefundToList = function() {
  return this.setRefundToList([]);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.bip70.Payment.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.Payment} returns this
 */
proto.bip70.Payment.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.Payment.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.bip70.PaymentACK.prototype.toObject = function(opt_includeInstance) {
  return proto.bip70.PaymentACK.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.bip70.PaymentACK} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentACK.toObject = function(includeInstance, msg) {
  var f, obj = {
    payment: (f = msg.getPayment()) && proto.bip70.Payment.toObject(includeInstance, f),
    memo: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.bip70.PaymentACK}
 */
proto.bip70.PaymentACK.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.bip70.PaymentACK;
  return proto.bip70.PaymentACK.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.bip70.PaymentACK} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.bip70.PaymentACK}
 */
proto.bip70.PaymentACK.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.bip70.Payment;
      reader.readMessage(value,proto.bip70.Payment.deserializeBinaryFromReader);
      msg.setPayment(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.bip70.PaymentACK.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.bip70.PaymentACK.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.bip70.PaymentACK} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.bip70.PaymentACK.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayment();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.bip70.Payment.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required Payment payment = 1;
 * @return {!proto.bip70.Payment}
 */
proto.bip70.PaymentACK.prototype.getPayment = function() {
  return /** @type{!proto.bip70.Payment} */ (
    jspb.Message.getWrapperField(this, proto.bip70.Payment, 1, 1));
};


/**
 * @param {!proto.bip70.Payment} value
 * @return {!proto.bip70.PaymentACK} returns this
*/
proto.bip70.PaymentACK.prototype.setPayment = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentACK} returns this
 */
proto.bip70.PaymentACK.prototype.clearPayment = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentACK.prototype.hasPayment = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string memo = 2;
 * @return {string}
 */
proto.bip70.PaymentACK.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.bip70.PaymentACK} returns this
 */
proto.bip70.PaymentACK.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.bip70.PaymentACK} returns this
 */
proto.bip70.PaymentACK.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.bip70.PaymentACK.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.bip70);
