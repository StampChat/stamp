syntax = "proto3";
package relay;

// Basic key/value pair used to store header data.
message Header {
  string name = 1;
  string value = 2;
}

// ProfileEntry is an individual piece of structured data provided by wallet
// authors.
message ProfileEntry {
  // Kind is a hint to wallets as to what type of data to deserialize from the
  // `body` field.
  string kind = 1;
  // The `headers` are metadata that may be useful to an application.
  repeated Header headers = 2;
  // The body of the `ProfileEntry`.
  bytes body = 3;
}

// A profile attached to an address.
message Profile {
  // Timestamp allows servers to determine which profile is the most
  // recent. Given in unix time milliseconds.
  int64 timestamp = 1;
  // Time to live tells us how long this profile should exist before being
  // considered invalid. Given in unix time milliseconds.
  int64 ttl = 2;
  // User specified data to be interpreted by applications.
  repeated ProfileEntry entries = 3;
}

// Entry is an individual piece of structured data.
message PayloadEntry {
  // Informs the wallet what to do with this payload.
  string kind = 1;
  // The `headers` provide some extra metadata about the field that
  // may be relevant to the wallet.
  repeated Header headers = 2;
  // The body of the `PayloadEntry`.
  bytes body = 3;
}

// Payload is the user-specified data section of the message that is
// encrypted by the shared secret.
message Payload {
  // A timestamp provided by sender.
  int64 timestamp = 1;
  // User specified data to be interpreted by applications.
  repeated PayloadEntry entries = 2;
}

// A stamp transaction paired with a list of vouts identifying to stamp outputs.
message StampOutpoints {
  // A serialized stamp transaction.
  bytes stamp_tx = 1;
  // The specified outputs of the stamp transaction.
  repeated uint32 vouts = 2;
}

// Represents a stamp. This is used within Message in order to attach value.
message Stamp {
  // Represents the stamp type.
  enum StampType {
    // Indicates no stamp information is attached.
    None = 0;
    // Indicates that the stamp outputs are redeemable as HD derivations from a
    // master private key `d + SHA-256(payload)`.
    MessageCommitment = 1;
  }
  // The stamp type.
  StampType stamp_type = 1;
  // A collection of stamp outpoints.
  repeated StampOutpoints stamp_outpoints = 2;
}

// The primary message used in communication over the relay protocol.
message Message {
  // The source public key.
  bytes source_public_key = 1;
  // The destinations public key.
  bytes destination_public_key = 2;
  // Maleable server time.
  int64 received_time = 3;
  // The SHA-256 digest of the payload.
  bytes payload_digest = 4;
  // The stamp attached to the message.
  Stamp stamp = 5;
  // Represents an encryption scheme.
  enum EncryptionScheme {
    // Indicates the `payload` is unencrypted.
    None = 0;
    // Indicates the `payload` is encrypted using AES and the Ephemeral
    // Diffie-Hellman style protocol key exchange, specifically `HMAC(sdG,
    // salt)`.
    EphemeralDH = 1;
  }
  // The encryption scheme used on the serialized `Payload` to produce the
  // `payload` field.
  EncryptionScheme scheme = 6;
  // The `salt` is used to salt both the `payload_hmac` and the encryption key.
  bytes salt = 7;
  // The HMAC of the `payload`, specifically `HMAC(HMAC(sdG, salt),
  // payload_digest)`.
  bytes payload_hmac = 8;
  // The size, in bytes, of the `payload`.
  uint64 payload_size = 9;
  // The encrypted `payload`.
  bytes payload = 100;
}

// Collection of messages. Pushed from client to server via HTTP.
message MessageSet { repeated Message messages = 1; }

// An error associated with the validation and insertion of a message.
message PushError {
  // Status code of the error.
  uint32 status_code = 1;
  // Textual information of the error.
  string error_text = 2;
}

// A collection of errors yeilded when pushing message to the server.
message PushErrors {
  // A map of errors, keyed by the index of the failed message.
  map<int32, PushError> errors = 1;
}

// A page of messages. Pulled from server via HTTP.
message MessagePage {
  // Collection of messages.
  repeated Message messages = 1;
  // The received time of the earliest message in the page.
  int64 start_time = 2;
  // The received time of the latest message in the page.
  int64 end_time = 3;
  // The payload digest of the earliest message in the page.
  bytes start_digest = 4;
  // The payload digest of the latest message in the page.
  bytes end_digest = 5;
}

// A page of payloads. Pulled from server via HTTP.
message PayloadPage {
  // Collection of payloads.
  repeated bytes payloads = 1;
  // The received time of the earliest payload in the page.
  int64 start_time = 2;
  // The received time of the latest payload in the page.
  int64 end_time = 3;
  // The payload digest of the earliest payload in the page.
  bytes start_digest = 4;
  // The payload digest of the latest payload in the page.
  bytes end_digest = 5;
}
