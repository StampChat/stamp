syntax = "proto3";
package keyserver;

// Basic key/value used to store header data.
message Header {
  string name = 1;
  string value = 2;
}

// AddressEntry is an individual piece of structured data provided by wallet
// authors.
message AddressEntry {
  // Kind is a hint to wallets as to what type of data to deserialize from the
  // metadata field.
  string kind = 1;
  // The headers is excess metadata that may be useful to a wallet.
  map<string, string> headers = 2;
  // Body of the `Entry`.
  bytes body = 3;
}

// AddressMetadata is the user-specified data that is covered by the users
// signature.
message AddressMetadata {
  // Repeat pubkey key here so there is a commitment to the key in the signed
  // payload. We want the overall format for SignedPayloads to be able to be
  // verified and checked against burns without particular details of this
  // payload needed. Repeating it here ensures that the "SignedPayload" layer
  // can be handled independently of payload data, and that this payload data
  // isn't reusable for other keys.
  bytes pubkey = 1;
  // Timestamp allows servers to determine which version of the data is the most
  // recent. Given in milliseconds.
  int64 timestamp = 2;
  // TTL tells us how long this entry should exist before being considered
  // invalid. Given in milliseconds.
  int64 ttl = 3;
  // User specified data. Presumably some conventional data determined by
  // wallet authors.
  repeated AddressEntry entries = 4;
}

// Peer represents a single peer.
message Peer {
  // The URL pointing to the root of the keyserver REST API.
  string url = 1;
}

// A list of peers.
message Peers { repeated Peer peers = 1; }
